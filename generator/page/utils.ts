import { generateFile, logger, prompts } from '@umijs/utils';
import { existsSync, readdirSync, statSync } from 'fs';
import { basename, dirname, extname, join, parse } from 'path';

export interface IArgsBase {
  fallback?: boolean;
  eject?: boolean;
  _: string[];
}

export interface IArgsPage extends IArgsBase {
  dir?: boolean;
}

export interface IArgsComponent extends IArgsBase {}

export function promptsExitWhenCancel<T extends string = string>(
  questions: prompts.PromptObject<T> | Array<prompts.PromptObject<T>>,
  options?: Pick<prompts.Options, 'onSubmit'>,
): Promise<prompts.Answers<T>> {
  return prompts(questions, {
    ...options,
    onCancel: () => {
      process.exit(1);
    },
  });
}

export interface IFile {
  from: string;
  fromFallback: string;
  to: string;
  exts?: string[];
}

export async function processGenerateFiles({
  filesMap,
  baseDir,
  presetArgs = {},
  templateVars,
}: {
  filesMap: IFile[];
  baseDir: string;
  presetArgs?: {
    fallback?: boolean;
  };
  templateVars: Record<string, any>;
}) {
  const { fallback } = presetArgs;

  const choosePath = ({ from, fromFallback, exts = [] }: IFile) => {
    if (fallback) {
      return fromFallback;
    }

    if (existsSync(from)) {
      if (
        statSync(from).isDirectory() &&
        readdirSync(from).filter((name) => name !== '.DS_Store').length === 0
      ) {
        return fromFallback;
      }

      return from;
    }

    for (const ext of exts) {
      const fullPath = from + ext;
      if (existsSync(fullPath) && statSync(fullPath).isFile()) {
        return fullPath;
      }
    }

    return fromFallback;
  };
  const names: string[] = [];
  for (const file of filesMap) {
    const { to, fromFallback } = file;
    const fromPath = choosePath(file);

    // keep toPath's ext same with fromPath
    const toPath = statSync(fromPath).isDirectory()
      ? to
      : join(dirname(to), parse(to).name + extname(fromPath.replace(/\.tpl$/, '')));

    await generateFile({
      path: fromPath,
      target: toPath,
      data: templateVars,
      baseDir,
    });

    if (fromPath !== fromFallback) {
      names.push(basename(to));
    }
  }

  if (names.length > 0) {
    logger.info(`${names.join(', ')} is generated by yourself template.`);
  }
}
